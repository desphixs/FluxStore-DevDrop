"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

import environ
import os

# Initialise environment variables
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# reading .env file

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-guul@(b7x1(^-t!&k#f@u!sfd*v87%p(+-vnqs110g!@rmnpzy'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

ALLOWED_HOSTS = ['*']
CSRF_TRUSTED_ORIGINS = [ 
    "http://127.0.0.1:5173",
    "http://localhost:5173",
    "http://127.0.0.1:8000",
    "http://localhost:8000", 
    'http://127.0.0.1', 
    'https://*.ngrok-free.app', 
    'https://fluxstore-devdrop.up.railway.app'
]
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin-allow-popups'
# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.humanize',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Custom Apps
    'userauths',
    'order',
    'store',
    'addon',
    'payments',
    'customer',
    'vendor',

    # Third party apps
    'django_ckeditor_5',
    "django_summernote",
    "anymail",

    # allauth core
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # providers
    'allauth.socialaccount.providers.google',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    "allauth.account.middleware.AccountMiddleware",
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # Context processors
                'order.context_processors.global_context',
                'addon.context_processors.global_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'



ADDON_GLOBAL_CONTEXT_CACHE_TIMEOUT = env.int("ADDON_GLOBAL_CONTEXT_CACHE_TIMEOUT", default=300)

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
        "OPTIONS": {
            "location": MEDIA_ROOT,   
            "base_url": MEDIA_URL,    
        },
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = "userauths.User"

SHIPROCKET_API_BASE = "https://apiv2.shiprocket.in/v1/external"
SHIPROCKET_API_USER_EMAIL = env("SHIPROCKET_API_USER_EMAIL")
SHIPROCKET_API_USER_PASSWORD = env("SHIPROCKET_API_USER_PASSWORD")
SHIPROCKET_PICKUP_PINCODE = env("SHIPROCKET_PICKUP_PINCODE", default="110001")


EASEBUZZ_KEY = env("EASEBUZZ_API_KEY")
EASEBUZZ_SALT = env("EASEBUZZ_SALT_KEY")
EASEBUZZ_ENV = env("EASEBUZZ_ENV").lower().strip()

def EASEBUZZ_BASE():
    return "https://pay.easebuzz.in" if EASEBUZZ_ENV == "prod" else "https://testpay.easebuzz.in"


SEND_AUTH_EMAIL = env.bool("SEND_AUTH_EMAIL", default=True)

ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
ACCOUNT_PRESERVE_USERNAME_CASING = False

ACCOUNT_EMAIL_VERIFICATION = "mandatory" if SEND_AUTH_EMAIL else "none"

ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = "userauths:login"
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = "userauths:login"

LOGIN_URL = "userauths:login"
LOGIN_REDIRECT_URL = "store:index"
LOGOUT_REDIRECT_URL = "userauths:login"


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',              
    'allauth.account.auth_backends.AuthenticationBackend',          
]

ACCOUNT_ADAPTER = "userauths.adapters.AccountAdapter"
SOCIALACCOUNT_ADAPTER = "userauths.adapters.SocialAdapter"
SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_AUTO_SIGNUP = True
TRUST_GOOGLE_EMAIL = True

EMAIL_BACKEND = "anymail.backends.mailersend.EmailBackend"

ANYMAIL = {
    "MAILERSEND_API_TOKEN": os.getenv("MAILERSEND_API_TOKEN", ""),
    "SEND_DEFAULTS": {
        "from_email": os.getenv("DEFAULT_FROM_EMAIL", ""),
    },
}

DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "")
SERVER_EMAIL = os.getenv("SERVER_EMAIL", "")

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": ["profile", "email", "openid"],
        "AUTH_PARAMS": {"access_type": "online"},
        "APP": {
            "client_id": env.str("GOOGLE_CLIENT_ID", default=""),
            "secret": env.str("GOOGLE_CLIENT_SECRET", default=""),
            "key": "",
        },
    }
}


# settings.py
SINGLE_COUPON_PER_ORDER = True 
SINGLE_COUPON_PER_VENDOR = True 


JAZZMIN_SETTINGS = {
    "site_title": "FluxStore",
    "site_header": "FluxStore",
    "site_brand": "FluxStore",
    "welcome_sign": "Welcome to FluxStore",

    # Favicon
    "site_icon": "assets/img/favicon.png",       

    # Logos
    "site_logo": "assets/img/favicon.png",         
    "login_logo": "assets/img/favicon.png",         

    "custom_css": "assets/css/jazzmin-custom-admin.css",
}


DJANGO_CKEDITOR_5_CONFIGS = {
    "default": {
        "toolbar": [
            "heading", "|", "bold", "italic", "underline", "link",
            "bulletedList", "numberedList", "blockQuote",
            "insertTable", "imageUpload", "mediaEmbed",
            "undo", "redo",
        ],
        "language": "en",
    },
    "comment": {
        "toolbar": ["bold", "italic", "link"],
        "language": "en",
    },
}

